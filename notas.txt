revisar todos los AddRef cuando se entregan las interfaces

sacar los ap de los vectores y revisar las iteraciones de las destrucciones

!! revisar si hay quue addref cuando se entregan las columnas en la colleccion

---------------------

!! terminar las columnas

referencia separada para las columnas y manejar la vida de las columnas por
el reference count.

--------------------

el array de columnas debe ser sorted by pos

define cols deberia implementarse

generalizar la validacion del vt con el de la Params)

------------------------------

¿pasar todos los Index a short?

------------------------------

almacenar los parametros en un map<unique, AP<IIParam > > permite localizar mas tarde el parametro y 
extraerlo (esto tambien es verdadero con un vector

en el caso de los parametros es posible querer re-bindear un parametro, en este caso el usar uniques 
me independiza mas de internals (como la diff del vector)

---------------------------------------------

¿No será conveniente usar referencias (VARIANT*) en los variants de input para evitar 
que el vb tenga que copiarlo?

---------------------

  /*enum VARENUM
    {
    VT_EMPTY           = 0,
    VT_NULL            = 1,
    VT_I2              = 2,
    VT_I4              = 3,
    VT_R4              = 4,
    VT_R8              = 5,
    VT_CY              = 6,
    VT_DATE            = 7,
    VT_BSTR            = 8,
    VT_DISPATCH        = 9,
    VT_ERROR           = 10,
    VT_BOOL            = 11,
    VT_VARIANT         = 12,
    VT_UNKNOWN         = 13,
    VT_DECIMAL         = 14,

    VT_I1              = 16,
    VT_UI1             = 17,
    VT_UI2             = 18,
    VT_UI4             = 19,
    VT_I8              = 20,
    VT_UI8             = 21,
    VT_INT             = 22,
    VT_UINT            = 23,
    VT_VOID            = 24,
    VT_HRESULT         = 25,
    VT_PTR             = 26,
    VT_SAFEARRAY       = 27,
    VT_CARRAY          = 28,
    VT_USERDEFINED     = 29,
    VT_LPSTR           = 30,
    VT_LPWSTR          = 31,

    VT_FILETIME        = 64,
    VT_BLOB            = 65,
    VT_STREAM          = 66,
    VT_STORAGE         = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT   = 69,
    VT_BLOB_OBJECT     = 70,
    VT_CF              = 71,
    VT_CLSID           = 72,

    VT_VECTOR          = 0x1000,
    VT_ARRAY           = 0x2000,
    VT_BYREF           = 0x4000,
    VT_RESERVED        = 0x8000,

    VT_ILLEGAL         = 0xffff,
    VT_ILLEGALMASKED   = 0x0fff,
    VT_TYPEMASK        = 0x0fff
    };*/
--------------------------


revisar que efectivamente se esten llamando a los destructores de lo AP<> el un RAISE 
y
revisar si el definecolumns y el fetch se avisan que las columnas estan definidas

revisar la maquina para que no se llame a oexfet luego de un execute


---------------------------

30-1-98

numerar definitivamente  los id(x)

!! agregar Strict , NullOk , Precision, scale,

plantear seriamente la maquina de estados

revisar que el definecolumns borre las previas.

------------------------------

pendiente 
bool 
TColumn::ValidateIndex(long)

-------------------------------
16 /2/ 98

verifique que un raise en un destructor invoca el delete para el objeto ( no el destructor)

por lo que la memoria queda liberada (pero la destruccion hay que hacerla explicita)

-----------------------------

los parametros que no tienen valorinicial por defecto deberiantener el indocador
de nulo en true

-------------------------------

en el caso de rebindeo es necesario un InternalReparse y loop->Bind()

-------------------------------

si las clases IXXX no tienen destructores virtuales, los derivados no se 
llaman (pero la mem se libera)

--------------------------------

revisar a ver que pasa si asignas "" a un param

-------------------------------

imsat 318-8300

-------------------------------

atencion los inserts generan 1403 (¿mover EOF?)

-------------------------------

crear un error para el odate porque aparentemente no modifica lasterror 

------------------------------

En una futora version cuando Param no sea parte de Cursor las columnas 
en realidad tampoco deberian serlo.

------------------------------

Params y Cols deverian se métodos

el objeto Param deberia siempre representar un elemento único  y los array 
serian una coleccion de Params (esto solo a nivel de interfaz automation)


-------------------------------

SI PASO -1 como arg de params.item el -1 es interpretado como no numerico (ver fuente)
validar mejor

-----------------------------


lod direcrorios debug & release incluyen la version de manera que no colsionen

cada vez que corre el debug registra el la dll

--------------------------------

							
							
#notas.txt#
.
..
Dbo.Def				OK
auxiliar.cpp			OK
auxiliar.hxx			OK
basura
borrar_lib
caratula.rtf
classfactory.cpp		OK
column.cpp			pasar a 1.4		listo!
column.hxx			merge 1.4 y 1.3.1.1	
column_bstr.cpp			OK
column_date.cpp			1.1 u 1.6 (ver asunto de fechas magicas)
columns.cpp			OK
contents.cnt
cursor.cpp			OK
cursor.hxx			OK
cursor2.cpp			OK
cursor3.cpp			OK
dbo.hxx				OK (ver el tema del singleton del classfactoy y de porque daba gpf)
dbo.rc				OK
dbo20.reg
dbo20.td2
dbo21.ico
dbo21.reg
dboidl.idl			OK
dbomc.mc			OK
debug
dispatch.cpp			OK
dispatch.hxx			OK
dll.cpp				OK
hlpsym.h			OK
icolumn.hxx			OK
icolumns.hxx			OK
icursor.hxx			OK
iparam.hxx			OK
iparams.hxx			OK
is
isession.hxx			OK
lastbuild
license bad dom.reg
license.cpp			ver esquema de lic!!!!!
license.reg
licensefactory.cpp
makefile
makefile.cpp	
makefile.tcl
makefile.vc
notas.txt
oci73
param.cpp			
param.hxx			OK
param_bind.cpp			OK
param_bind_array.cpp		OK
param_bstr.cpp			
param_date.cpp
param_g.cpp			OK
params.cpp			OK
pch.hxx				OK
rcs
session.cpp			OK
session.hxx			OK
sqlnet.log
tcl
test.tcl
test.tpj
test2.tcl
topicos.rtf
vb
vc50.pdb

----------------------------------------
create table raw_test_01 (id NUMBER(6), data LONG RAW);

----------------------------------------

Implementar validate reg.

Ver porque no usa obndra para los arrays

cambiar el metodo con el que se especifica el len del string para permitir big buffers

implementar un evento para el non-blocking

ver que makefile.cpp no cree vc50.pdb

revisar los + - 1 en el size de los bindeos de strings

agregar tipo RAW en la columna

IMPORTANTE!!!! 
HAY QUE MODIFICAR ANSI Y WIDE X QUE NO SE BANCAN UN \0 EN EL STRING

------------------------------------------

NOTAS X EL MTS

The component must export the DllRegisterServer function and perform self-registration of its CLSID, ProgID, interfaces, and type library in this routine. 

If you do not have a resource dispenser, you can build your own using the Microsoft Transaction Server Beta Software Development Kit (SDK), available at http://www.microsoft.com/support/transactions/. For more information, see the Resource Dispenser Guide and the samples included with the MTS Beta SDK.

For a resource manager to participate in an MTS transaction, it must support one of the following protocols: 

OLE Transactions 
The X/Open DTP XA standard 

OraOLEDB consumers must install Oracle Services for Microsoft Transaction Server (MTS) release 8.1.5.0.1 or later to be able to participate in Microsoft Transaction Server transactions or to enlist in a global transaction coordinated by Microsoft Distributed Transaction Coordinator (MS DTC). For setup and configuration information on Oracle Services for MTS, see Using Microsoft Transaction Server With Oracle8. 

